-- This file setups all required tables and triggers

create table public.gamelog (
  id bigint generated by default as identity not null,
  event_time timestamp with time zone not null,
  latitude numeric not null,
  longitude numeric not null,
  action text not null,
  comment text null,
  geometry geometry not null,
  constraint gamelog_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_gamelog_geom on public.gamelog using gist (geometry) TABLESPACE pg_default;

create index IF not exists idx_gamelog_lat_lon_time on public.gamelog using btree (latitude, longitude, event_time) TABLESPACE pg_default;

CREATE OR REPLACE FUNCTION public.set_geo_from_latlon()
    RETURNS trigger
        LANGUAGE plpgsql
    AS $function$BEGIN
        IF NEW."latitude" IS NOT NULL AND NEW."longitude" IS NOT NULL THEN
           NEW."geometry" := ST_SetSRID(ST_MakePoint(NEW."longitude", NEW."latitude"), 4326);
        END IF;
    RETURN NEW;
END;$function$

create trigger trg_set_geo BEFORE INSERT
or
update on gamelog for EACH row
execute FUNCTION set_geo_from_latlon ();


create table public.mind_units_controlled (
  id bigint generated by default as identity not null,
  time timestamp with time zone not null,
  value numeric not null,
  constraint mind_units_controlled_pkey primary key (id)
) TABLESPACE pg_default;


create table public.overclock_glyph_hack_points (
  id bigint generated by default as identity not null,
  time timestamp with time zone not null,
  value numeric not null,
  constraint overclock_glyph_hack_points_pkey primary key (id)
) TABLESPACE pg_default;


create table public.portal_held_days (
  id bigint generated by default as identity not null,
  time timestamp with time zone not null,
  value numeric not null,
  constraint portal_held_days_pkey primary key (id)
) TABLESPACE pg_default;


create table public.portal_history (
  id bigint generated by default as identity not null,
  type text null,
  latitude numeric not null,
  longitude numeric not null,
  geometry geometry not null,
  constraint portal_history_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_portal_history_geom on public.portal_history using gist (geometry) TABLESPACE pg_default;

CREATE OR REPLACE FUNCTION public.set_geo_from_latlon_portal_history()
        RETURNS trigger
        LANGUAGE plpgsql
    AS $function$BEGIN
        IF NEW."latitude" IS NOT NULL AND NEW."longitude" IS NOT NULL THEN
            NEW."geometry" := ST_SetSRID(ST_MakePoint(NEW."longitude", NEW."latitude"), 4326);
        END IF;
    RETURN NEW;
END;$function$

create trigger set_geo_from_latlon_portal_history BEFORE INSERT
or
update on portal_history for EACH row
execute FUNCTION set_geo_from_latlon_portal_history ();


create table public.store_purchases (
  id bigint generated by default as identity not null,
  time timestamp with time zone not null,
  transaction_type text not null,
  item text not null,
  new_cmu_balance text null,
  transaction_description text not null,
  constraint store_purchases_pkey primary key (id)
) TABLESPACE pg_default;


create table public.xm_recharged (
  id bigint generated by default as identity not null,
  time timestamp with time zone not null,
  value numeric not null,
  constraint xm_recharged_pkey primary key (id)
) TABLESPACE pg_default;